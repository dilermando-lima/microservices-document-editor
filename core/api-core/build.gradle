plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1' apply false
	id 'io.spring.dependency-management' version '1.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

dependencyManagement {
	imports {
		mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
	}
}

repositories {
    mavenCentral()
}

group='apicore'
version='1.0.0'
sourceCompatibility=17
targetCompatibility=17

sourceSets {
    main.java.srcDirs = ['src']
    main.resources.srcDirs = ['src-resource']
    test.java.srcDirs = ['tst']
    test.resources.srcDirs = ['tst-resource']
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    
    implementation 'com.auth0:java-jwt:4.2.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.11.0'
}

test {
    testLogging.events = ['passed', 'skipped', 'failed']
    useJUnitPlatform()
}

/* == RUN COVERAGE ANALYSIS ==
    ./gradlew core:clean core:jacocoTestReport
     it will be placed in ./build/reports/jacoco/test/html/index.html
 */
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

/* == RUN QUALITY ANALYSIS ==
    docker run -d --name sonarqube_containter -p 9000:9000 -p 9092:9092 sonarqube
    ./gradlew {NAME_MODULE}:sonarqube -Dsonar.projectName={PROJECT_NAME} -Dsonar.host.url=http://localhost:9000 -Dsonar.login=admin -Dsonar.password={YOUR_PASSWORD_CONSOLE_SONAR}
*/
tasks['sonarqube'].dependsOn jacocoTestReport

